<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-07-18T00:36:53-07:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Zhihao Zhang</title><subtitle>A blog about my projects and my knowledge graph.</subtitle><entry><title type="html">EcommerceForce - Flask Based API Design</title><link href="http://localhost:4000/ECommerceForce/" rel="alternate" type="text/html" title="EcommerceForce - Flask Based API Design" /><published>2019-05-11T15:34:00-07:00</published><updated>2019-05-11T15:34:00-07:00</updated><id>http://localhost:4000/ECommerceForce</id><content type="html" xml:base="http://localhost:4000/ECommerceForce/">&lt;p&gt;Fully featured web service for online stores, providing convenient and extensible API with detailed documentation&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/zhihaozhangim/EcommerceForce&quot;&gt;Source code&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;What is EcommerceForce all about?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Created RESTful API with Flask in a Test-first principle, with all the API tested and documented in Postman to ensure easy usability and 100% functionality&lt;/li&gt;
  &lt;li&gt;Stored data in a local SQLite database, using SQLAlchemy as ORM for efficient database query and manipulation&lt;/li&gt;
  &lt;li&gt;Implemented E-mail confirmation with Mailgun, and JWT authentication with Flask-JWT-Extended for security&lt;/li&gt;
  &lt;li&gt;Applied Stripe API for payment acceptance, OAuth 2.0 for third party login, Flask-Uploads for image uploads&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Project Demo&lt;/p&gt;

&lt;p&gt;API has been published, you can try this service using Postman.
&lt;a href=&quot;https://documenter.getpostman.com/view/4791858/SVSLpnra?version=latest&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/zhihaozhangim/EcommerceForce&quot;&gt;Check it out&lt;/a&gt; here.
If you need some help, please &lt;a href=&quot;https://github.com/zhihaozhangim/EcommerceForce/issues&quot;&gt;file an issue&lt;/a&gt;.&lt;/p&gt;</content><author><name>zhihaozhang</name></author><category term="project" /><category term="Flask" /><category term="Python3" /><category term="Backend" /><category term="RESTful" /><category term="OAuth2" /><category term="Stripe" /><category term="Mailgun" /><summary type="html">Fully featured web service for online stores, providing convenient and extensible API with detailed documentation</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://res.cloudinary.com/do3j5ljcx/image/upload/v1563432219/1200px-Flask_logo.svg.png" /></entry><entry><title type="html">EasyDining - Java Web Development</title><link href="http://localhost:4000/CareerNow/" rel="alternate" type="text/html" title="EasyDining - Java Web Development" /><published>2019-04-22T19:10:00-07:00</published><updated>2019-04-22T19:10:00-07:00</updated><id>http://localhost:4000/CareerNow</id><content type="html" xml:base="http://localhost:4000/CareerNow/">&lt;p&gt;Full-stack web application in MVC architecture for food delivery website to handle orders and manage inventory.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/zhihaozhangim/EasyDinning&quot;&gt;Source code&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;What is EasyDinning all about?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Created RESTful API with Spring Boot, applying SLF4J and Logback to record real-time system logs&lt;/li&gt;
  &lt;li&gt;Utilized MySQL database to store products and orders information, using Spring Data JPA for efficient database looking-up and manipulation, supplemented with Redis as Cache layer to boost server performance&lt;/li&gt;
  &lt;li&gt;Built a user-friendly frontend with Bootstrap and FreeMarker, leveraging WebSocket to push instant notifications&lt;/li&gt;
  &lt;li&gt;Implemented distributed lock with Redis, enabling server to handle 300 QPS tested by Apache ab&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Project Demo&lt;/p&gt;

&lt;p&gt;Order List
&lt;img src=&quot;https://res.cloudinary.com/do3j5ljcx/image/upload/v1563396644/List.png&quot; alt=&quot;Order List&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Product List
&lt;img src=&quot;https://res.cloudinary.com/do3j5ljcx/image/upload/v1563396645/Product_List.png&quot; alt=&quot;Product List&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Order Detail1
&lt;img src=&quot;https://res.cloudinary.com/do3j5ljcx/image/upload/v1563396643/Order_Detail1.png&quot; alt=&quot;Order Detail1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Order Detail2
&lt;img src=&quot;https://res.cloudinary.com/do3j5ljcx/image/upload/v1563396644/Order_Detail2.png&quot; alt=&quot;Order Detail2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Category List
&lt;img src=&quot;https://res.cloudinary.com/do3j5ljcx/image/upload/v1563396642/Category_List.png&quot; alt=&quot;Category List&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Create/Update Product
&lt;img src=&quot;https://res.cloudinary.com/do3j5ljcx/image/upload/v1563396643/Create_update_Product.png&quot; alt=&quot;Create/Update Product&quot; /&gt;&lt;/p&gt;

&lt;p&gt;New Order Notification
&lt;img src=&quot;https://res.cloudinary.com/do3j5ljcx/image/upload/v1563396643/New_Order_Notifications.png&quot; alt=&quot;New Order Notification&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Special credits to my friend &lt;a href=&quot;https://www.linkedin.com/in/jinghao-wang-shaw/&quot;&gt;Shawn Wang&lt;/a&gt; for creating the awesome client side UI&lt;/p&gt;

&lt;p&gt;Client List
&lt;img src=&quot;https://res.cloudinary.com/do3j5ljcx/image/upload/v1563396642/Client_Side_List.png&quot; alt=&quot;Client List&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Client Side Comments
&lt;img src=&quot;https://res.cloudinary.com/do3j5ljcx/image/upload/v1563396642/Client_Side_Comments.png&quot; alt=&quot;Client Side Comments&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Client Side Make Order
&lt;img src=&quot;https://res.cloudinary.com/do3j5ljcx/image/upload/v1563396642/Client_Side_Make_Order.png&quot; alt=&quot;Client Side Make Order&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/zhihaozhangim/EasyDinning&quot;&gt;Check it out&lt;/a&gt; here.
If you need some help, please &lt;a href=&quot;https://github.com/zhihaozhangim/EasyDinning/issues&quot;&gt;file an issue&lt;/a&gt;.&lt;/p&gt;</content><author><name>zhihaozhang</name></author><category term="project" /><category term="Java, SpringBoot, MySQL, RESTful, Logback, WebSocket" /><summary type="html">Full-stack web application in MVC architecture for food delivery website to handle orders and manage inventory.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://res.cloudinary.com/do3j5ljcx/image/upload/v1563394461/spring-boot.png" /></entry><entry><title type="html">EasyDining - Java Web Development</title><link href="http://localhost:4000/MovieFinder/" rel="alternate" type="text/html" title="EasyDining - Java Web Development" /><published>2019-04-22T19:10:00-07:00</published><updated>2019-04-22T19:10:00-07:00</updated><id>http://localhost:4000/MovieFinder</id><content type="html" xml:base="http://localhost:4000/MovieFinder/">&lt;p&gt;Full-stack web application in MVC architecture for food delivery website to handle orders and manage inventory.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/zhihaozhangim/EasyDinning&quot;&gt;Source code&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;What is EasyDinning all about?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Created RESTful API with Spring Boot, applying SLF4J and Logback to record real-time system logs&lt;/li&gt;
  &lt;li&gt;Utilized MySQL database to store products and orders information, using Spring Data JPA for efficient database looking-up and manipulation, supplemented with Redis as Cache layer to boost server performance&lt;/li&gt;
  &lt;li&gt;Built a user-friendly frontend with Bootstrap and FreeMarker, leveraging WebSocket to push instant notifications&lt;/li&gt;
  &lt;li&gt;Implemented distributed lock with Redis, enabling server to handle 300 QPS tested by Apache ab&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Project Demo&lt;/p&gt;

&lt;p&gt;Order List
&lt;img src=&quot;https://res.cloudinary.com/do3j5ljcx/image/upload/v1563396644/List.png&quot; alt=&quot;Order List&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Product List
&lt;img src=&quot;https://res.cloudinary.com/do3j5ljcx/image/upload/v1563396645/Product_List.png&quot; alt=&quot;Product List&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Order Detail1
&lt;img src=&quot;https://res.cloudinary.com/do3j5ljcx/image/upload/v1563396643/Order_Detail1.png&quot; alt=&quot;Order Detail1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Order Detail2
&lt;img src=&quot;https://res.cloudinary.com/do3j5ljcx/image/upload/v1563396644/Order_Detail2.png&quot; alt=&quot;Order Detail2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Category List
&lt;img src=&quot;https://res.cloudinary.com/do3j5ljcx/image/upload/v1563396642/Category_List.png&quot; alt=&quot;Category List&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Create/Update Product
&lt;img src=&quot;https://res.cloudinary.com/do3j5ljcx/image/upload/v1563396643/Create_update_Product.png&quot; alt=&quot;Create/Update Product&quot; /&gt;&lt;/p&gt;

&lt;p&gt;New Order Notification
&lt;img src=&quot;https://res.cloudinary.com/do3j5ljcx/image/upload/v1563396643/New_Order_Notifications.png&quot; alt=&quot;New Order Notification&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Special credits to my friend &lt;a href=&quot;https://www.linkedin.com/in/jinghao-wang-shaw/&quot;&gt;Shawn Wang&lt;/a&gt; for creating the awesome client side UI&lt;/p&gt;

&lt;p&gt;Client List
&lt;img src=&quot;https://res.cloudinary.com/do3j5ljcx/image/upload/v1563396642/Client_Side_List.png&quot; alt=&quot;Client List&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Client Side Comments
&lt;img src=&quot;https://res.cloudinary.com/do3j5ljcx/image/upload/v1563396642/Client_Side_Comments.png&quot; alt=&quot;Client Side Comments&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Client Side Make Order
&lt;img src=&quot;https://res.cloudinary.com/do3j5ljcx/image/upload/v1563396642/Client_Side_Make_Order.png&quot; alt=&quot;Client Side Make Order&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/zhihaozhangim/EasyDinning&quot;&gt;Check it out&lt;/a&gt; here.
If you need some help, please &lt;a href=&quot;https://github.com/zhihaozhangim/EasyDinning/issues&quot;&gt;file an issue&lt;/a&gt;.&lt;/p&gt;</content><author><name>zhihaozhang</name></author><category term="project" /><category term="Java, SpringBoot, MySQL, RESTful, Logback, WebSocket" /><summary type="html">Full-stack web application in MVC architecture for food delivery website to handle orders and manage inventory.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://res.cloudinary.com/do3j5ljcx/image/upload/v1563394461/spring-boot.png" /></entry><entry><title type="html">EasyDining - Java Web Development</title><link href="http://localhost:4000/EasyDinning/" rel="alternate" type="text/html" title="EasyDining - Java Web Development" /><published>2019-04-22T19:10:00-07:00</published><updated>2019-04-22T19:10:00-07:00</updated><id>http://localhost:4000/EasyDinning</id><content type="html" xml:base="http://localhost:4000/EasyDinning/">&lt;p&gt;Full-stack web application in MVC architecture for food delivery website to handle orders and manage inventory.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/zhihaozhangim/EasyDinning&quot;&gt;Source code&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;What is EasyDinning all about?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Created RESTful API with Spring Boot, applying SLF4J and Logback to record real-time system logs&lt;/li&gt;
  &lt;li&gt;Utilized MySQL database to store products and orders information, using Spring Data JPA for efficient database looking-up and manipulation, supplemented with Redis as Cache layer to boost server performance&lt;/li&gt;
  &lt;li&gt;Built a user-friendly frontend with Bootstrap and FreeMarker, leveraging WebSocket to push instant notifications&lt;/li&gt;
  &lt;li&gt;Implemented distributed lock with Redis, enabling server to handle 300 QPS tested by Apache ab&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Project Demo&lt;/p&gt;

&lt;p&gt;Order List
&lt;img src=&quot;https://res.cloudinary.com/do3j5ljcx/image/upload/v1563396644/List.png&quot; alt=&quot;Order List&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Product List
&lt;img src=&quot;https://res.cloudinary.com/do3j5ljcx/image/upload/v1563396645/Product_List.png&quot; alt=&quot;Product List&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Order Detail1
&lt;img src=&quot;https://res.cloudinary.com/do3j5ljcx/image/upload/v1563396643/Order_Detail1.png&quot; alt=&quot;Order Detail1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Order Detail2
&lt;img src=&quot;https://res.cloudinary.com/do3j5ljcx/image/upload/v1563396644/Order_Detail2.png&quot; alt=&quot;Order Detail2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Category List
&lt;img src=&quot;https://res.cloudinary.com/do3j5ljcx/image/upload/v1563396642/Category_List.png&quot; alt=&quot;Category List&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Create/Update Product
&lt;img src=&quot;https://res.cloudinary.com/do3j5ljcx/image/upload/v1563396643/Create_update_Product.png&quot; alt=&quot;Create/Update Product&quot; /&gt;&lt;/p&gt;

&lt;p&gt;New Order Notification
&lt;img src=&quot;https://res.cloudinary.com/do3j5ljcx/image/upload/v1563396643/New_Order_Notifications.png&quot; alt=&quot;New Order Notification&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Special credits to my friend &lt;a href=&quot;https://www.linkedin.com/in/jinghao-wang-shaw/&quot;&gt;Shawn Wang&lt;/a&gt; for creating the awesome client side UI&lt;/p&gt;

&lt;p&gt;Client List
&lt;img src=&quot;https://res.cloudinary.com/do3j5ljcx/image/upload/v1563396642/Client_Side_List.png&quot; alt=&quot;Client List&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Client Side Comments
&lt;img src=&quot;https://res.cloudinary.com/do3j5ljcx/image/upload/v1563396642/Client_Side_Comments.png&quot; alt=&quot;Client Side Comments&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Client Side Make Order
&lt;img src=&quot;https://res.cloudinary.com/do3j5ljcx/image/upload/v1563396642/Client_Side_Make_Order.png&quot; alt=&quot;Client Side Make Order&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/zhihaozhangim/EasyDinning&quot;&gt;Check it out&lt;/a&gt; here.
If you need some help, please &lt;a href=&quot;https://github.com/zhihaozhangim/EasyDinning/issues&quot;&gt;file an issue&lt;/a&gt;.&lt;/p&gt;</content><author><name>zhihaozhang</name></author><category term="project" /><category term="Java" /><category term="SpringBoot" /><category term="MySQL" /><category term="RESTful" /><category term="Logback" /><category term="WebSocket" /><summary type="html">Full-stack web application in MVC architecture for food delivery website to handle orders and manage inventory.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://res.cloudinary.com/do3j5ljcx/image/upload/v1563394461/spring-boot.png" /></entry><entry><title type="html">IgniteFitness - Angular Based Web Application</title><link href="http://localhost:4000/IgniteFitness/" rel="alternate" type="text/html" title="IgniteFitness - Angular Based Web Application" /><published>2018-08-19T09:55:00-07:00</published><updated>2018-08-19T09:55:00-07:00</updated><id>http://localhost:4000/IgniteFitness</id><content type="html" xml:base="http://localhost:4000/IgniteFitness/">&lt;p&gt;A real-time workout application for users to take various kinds of exercises and view exercise history.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/zhihaozhangim/IgniteFitness&quot;&gt;Source code&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;What is EasyDinning all about?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Built a responsive user interface that reacts to device screen sizes using Angular and Angular Material&lt;/li&gt;
  &lt;li&gt;Applied Firebase as real-time database for the storage and sync of exercise information and for user authentication, leveraging AngularFire to interact with Firebase and monitor authentication state&lt;/li&gt;
  &lt;li&gt;Deployed the single page application to Firebase Hosting, implementing lazy loading to faster boot time&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Project Demo&lt;/p&gt;

&lt;p&gt;This web application has been deployed to Firebase Hosting
&lt;a href=&quot;https://fitness-tracker-47d8a.web.app/&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/zhihaozhangim/IgniteFitness&quot;&gt;Check it out&lt;/a&gt; here.
If you need some help, please &lt;a href=&quot;https://github.com/zhihaozhangim/IgniteFitness/issues&quot;&gt;file an issue&lt;/a&gt;.&lt;/p&gt;</content><author><name>zhihaozhang</name></author><category term="project" /><category term="Angular" /><category term="Angular Material" /><category term="JavaScript" /><category term="AngularFire" /><category term="Firebase" /><category term="Firebase Hosting" /><summary type="html">A real-time workout application for users to take various kinds of exercises and view exercise history.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://res.cloudinary.com/do3j5ljcx/image/upload/v1563434787/756150_c033_2.jpg" /></entry></feed>